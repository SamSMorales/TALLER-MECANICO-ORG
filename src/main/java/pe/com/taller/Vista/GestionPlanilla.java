package pe.com.taller.Vista;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Font;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Image;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.HeadlessException;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import pe.com.taller.Modelo.Conexion;
import pe.com.taller.Modelo.SQLPlanilla;

/**
 *
 * @author silva
 */
public class GestionPlanilla extends javax.swing.JPanel {

    private final DefaultComboBoxModel<String> comboBoxModel;
    private final SQLPlanilla sqlPlanilla;

    public GestionPlanilla() {
        initComponents();
        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("ID");
        modelo.addColumn("Nombre");
        modelo.addColumn("Días laborados");
        modelo.addColumn("Sueldo bruto");
        modelo.addColumn("Fecha");
        tablaPlanilla.setModel(modelo);
        sqlPlanilla = new SQLPlanilla();
        comboBoxModel = new DefaultComboBoxModel<>();
        cargarEmpleados(); // Llamamos al método para cargar los empleados
        CbxPersonal.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                if (e.getStateChange() == ItemEvent.SELECTED) {
                    actualizarSalarioBase();
                }
            }
        });
        btnPagar.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPagarActionPerformed(evt);  // Llamamos al método que maneja el evento
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaPlanilla = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        CbxPersonal = new javax.swing.JComboBox<>();
        txtSalarioBase = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txtSalarioFinal = new javax.swing.JTextField();
        btnCalcularSalario = new javax.swing.JButton();
        btnPagar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnReportePlanilla = new javax.swing.JButton();

        setMaximumSize(new java.awt.Dimension(770, 400));
        setMinimumSize(new java.awt.Dimension(770, 400));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel3.setBackground(new java.awt.Color(0, 0, 0));
        jLabel3.setFont(new java.awt.Font("Arial Narrow", 1, 24)); // NOI18N
        jLabel3.setText("Reporte Pago Planilla Semanal");
        jLabel3.setMaximumSize(new java.awt.Dimension(770, 440));
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 20, -1, -1));

        tablaPlanilla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tablaPlanilla);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 70, 440, 220));

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Arial Narrow", 1, 18)); // NOI18N
        jLabel1.setText("Pago Planilla");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 30, -1, -1));

        jLabel6.setFont(new java.awt.Font("Arial Narrow", 1, 16)); // NOI18N
        jLabel6.setText("Nombre:");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 70, -1, 20));

        jLabel8.setFont(new java.awt.Font("Arial Narrow", 1, 16)); // NOI18N
        jLabel8.setText("Salario final:");
        jLabel8.setDoubleBuffered(true);
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 210, -1, 20));

        CbxPersonal.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jPanel1.add(CbxPersonal, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 100, 180, -1));

        txtSalarioBase.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jPanel1.add(txtSalarioBase, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 170, 180, -1));

        jLabel9.setFont(new java.awt.Font("Arial Narrow", 1, 16)); // NOI18N
        jLabel9.setText("Salario base:");
        jLabel9.setDoubleBuffered(true);
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 140, -1, 20));

        txtSalarioFinal.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jPanel1.add(txtSalarioFinal, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 240, 180, -1));

        btnCalcularSalario.setBackground(new java.awt.Color(39, 77, 96));
        btnCalcularSalario.setFont(new java.awt.Font("Arial Narrow", 1, 16)); // NOI18N
        btnCalcularSalario.setForeground(new java.awt.Color(255, 255, 255));
        btnCalcularSalario.setText("CALCULAR");
        btnCalcularSalario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalcularSalarioActionPerformed(evt);
            }
        });
        jPanel1.add(btnCalcularSalario, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 300, -1, -1));

        btnPagar.setBackground(new java.awt.Color(227, 107, 44));
        btnPagar.setFont(new java.awt.Font("Arial Narrow", 1, 16)); // NOI18N
        btnPagar.setForeground(new java.awt.Color(255, 255, 255));
        btnPagar.setText("PAGAR");
        jPanel1.add(btnPagar, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 300, -1, -1));

        btnEliminar.setBackground(new java.awt.Color(180, 24, 45));
        btnEliminar.setFont(new java.awt.Font("Arial Narrow", 1, 16)); // NOI18N
        btnEliminar.setForeground(new java.awt.Color(255, 255, 255));
        btnEliminar.setText("ELIMINAR");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });
        jPanel1.add(btnEliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 340, -1, -1));

        add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 250, 400));

        btnReportePlanilla.setBackground(new java.awt.Color(3, 47, 48));
        btnReportePlanilla.setFont(new java.awt.Font("Arial Narrow", 1, 18)); // NOI18N
        btnReportePlanilla.setForeground(new java.awt.Color(255, 255, 255));
        btnReportePlanilla.setText("Generar Reporte");
        btnReportePlanilla.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReportePlanillaActionPerformed(evt);
            }
        });
        add(btnReportePlanilla, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 320, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void btnCalcularSalarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalcularSalarioActionPerformed
        calcularSueldoBruto();
    }//GEN-LAST:event_btnCalcularSalarioActionPerformed

    private void btnReportePlanillaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReportePlanillaActionPerformed
        Document documento = new Document();
        Conexion cn = new Conexion();

        try {
            String ruta = System.getProperty("user.home");
            PdfWriter.getInstance(documento, new FileOutputStream(ruta + "/Downloads/reporte_planilla.pdf"));

            Image header = Image.getInstance("src/main/java/pe/com/taller/img/banner.jpg");
            header.scaleToFit(650, 180);
            header.setAlignment(Chunk.ALIGN_CENTER);

            Paragraph parrafo1 = new Paragraph();
            parrafo1.setAlignment(Paragraph.ALIGN_CENTER);
            parrafo1.add("Reporte de Planilla de Pago \n\n");
            parrafo1.setFont(FontFactory.getFont("Tahoma", 20, Font.BOLD, BaseColor.DARK_GRAY));

            Paragraph parrafo = new Paragraph();
            parrafo.setAlignment(Paragraph.ALIGN_LEFT);
            parrafo.add("Taller Mecanico ChikiCard \n\n");
            parrafo.add("RUC: 1212121212 \n\n");
            parrafo.add("Dirección: Av. Nuevo - Piura \n\n");
            Date date = new Date();
            parrafo.add("Fecha : " + new SimpleDateFormat("dd-MM-yyyy").format(date) + "\n\n");
            parrafo.setFont(FontFactory.getFont("Roboto", 16, Font.BOLD, BaseColor.DARK_GRAY));

            documento.open();
            documento.add(header);
            documento.add(parrafo1);
            documento.add(parrafo);

            // Crear la tabla del reporte con las columnas correspondientes
            PdfPTable tabla = new PdfPTable(5);  // 5 columnas
            tabla.addCell("ID");
            tabla.addCell("Nombre");
            tabla.addCell("Días Laborados");
            tabla.addCell("Sueldo Bruto");
            tabla.addCell("Fecha");

            // Obtener los datos de la tablaPlanilla
            DefaultTableModel modelo = (DefaultTableModel) tablaPlanilla.getModel();
            int filas = modelo.getRowCount();  // Obtener el número de filas de la tabla

            for (int i = 0; i < filas; i++) {
                // Obtener cada fila de la tabla y añadirla al reporte
                String id = modelo.getValueAt(i, 0).toString();  // Columna 0: ID
                String nombre = modelo.getValueAt(i, 1).toString();  // Columna 1: Nombre
                String diasLaborados = modelo.getValueAt(i, 2).toString();  // Columna 2: Días laborados
                String sueldoBruto = modelo.getValueAt(i, 3).toString();  // Columna 3: Sueldo Bruto
                String fecha = modelo.getValueAt(i, 4).toString();  // Columna 4: Fecha

                // Añadir los datos al reporte
                tabla.addCell(id);
                tabla.addCell(nombre);
                tabla.addCell(diasLaborados);
                tabla.addCell(sueldoBruto);
                tabla.addCell(fecha);
            }

            // Añadir la tabla al documento PDF
            documento.add(tabla);

            documento.close();
            JOptionPane.showMessageDialog(null, "Reporte de planilla creado");

        } catch (DocumentException | HeadlessException | FileNotFoundException e) {
            System.out.println("Error al generar el reporte: " + e.getMessage());
            JOptionPane.showMessageDialog(null, "Error al generar el reporte: " + e.getMessage());
        } catch (IOException e) {
            System.out.println("Error en la imagen: " + e.getMessage());
            JOptionPane.showMessageDialog(null, "Error en la imagen: " + e.getMessage());
        }
    }//GEN-LAST:event_btnReportePlanillaActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        int filaSeleccionada = tablaPlanilla.getSelectedRow();

        if (filaSeleccionada != -1) {  // Verificar si hay una fila seleccionada
            // Obtener el idempl de la fila seleccionada (en la columna 0 de la tabla, que es el ID del empleado)
            int idEmpleado = (int) tablaPlanilla.getValueAt(filaSeleccionada, 0);

            // Confirmar que se desea eliminar la fila
            int respuesta = JOptionPane.showConfirmDialog(null, "¿Estás seguro de eliminar este registro?", "Confirmar", JOptionPane.YES_NO_OPTION);
            if (respuesta == JOptionPane.YES_OPTION) {
                Conexion con = new Conexion();

                try {
                    con.getconexion();

                    // Eliminar de la base de datos
                    String sqlEliminar = "DELETE FROM planilla WHERE idempl = ?";
                    PreparedStatement preEliminar = con.getconexion().prepareStatement(sqlEliminar);
                    preEliminar.setInt(1, idEmpleado);

                    // Ejecutar la eliminación
                    int filasAfectadas = preEliminar.executeUpdate();
                    if (filasAfectadas > 0) {
                        // Eliminar la fila de la tabla en la interfaz gráfica
                        DefaultTableModel modelo = (DefaultTableModel) tablaPlanilla.getModel();
                        modelo.removeRow(filaSeleccionada); // Elimina la fila seleccionada
                        JOptionPane.showMessageDialog(null, "Registro eliminado correctamente");
                        limpiar();
                    } else {
                        JOptionPane.showMessageDialog(null, "Error al eliminar el registro");
                    }

                } catch (SQLException e) {
                    System.out.println("Error al eliminar: " + e.getMessage());
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Por favor, selecciona una fila para eliminar.");
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JComboBox<String> CbxPersonal;
    private javax.swing.JButton btnCalcularSalario;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnPagar;
    private javax.swing.JButton btnReportePlanilla;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JTable tablaPlanilla;
    private javax.swing.JTextField txtSalarioBase;
    private javax.swing.JTextField txtSalarioFinal;
    // End of variables declaration//GEN-END:variables

    private void cargarEmpleados() {
        Conexion con = new Conexion();
        ResultSet res;

        try {
            con.getconexion();
            String sql = "SELECT * FROM empleado";
            PreparedStatement pre = con.getconexion().prepareCall(sql);
            res = pre.executeQuery();
            comboBoxModel.removeAllElements();

            while (res.next()) {
                String nombre = res.getString("nombre");
                String dni = res.getString("dni");
                String concatenado = nombre + " (" + dni + ")";
                comboBoxModel.addElement(concatenado);
            }

            CbxPersonal.setModel(comboBoxModel);
        } catch (SQLException e) {
            System.out.println("Error al cargar los empleados: " + e.getMessage());
        }
    }

    public void actualizarSalarioBase() {
        // Obtener el nombre del empleado seleccionado
        String seleccionado = (String) CbxPersonal.getSelectedItem();
        if (seleccionado != null) {
            // Extraemos el DNI del empleado (que está concatenado con el nombre)
            String dni = seleccionado.substring(seleccionado.indexOf("(") + 1, seleccionado.indexOf(")"));

            // Realizamos la consulta para obtener el salario base
            Conexion con = new Conexion();
            ResultSet res;

            try {
                con.getconexion();
                String sql = "SELECT sueldo_base FROM empleado WHERE dni = ?";
                PreparedStatement pre = con.getconexion().prepareCall(sql);
                pre.setString(1, dni);
                res = pre.executeQuery();

                if (res.next()) {
                    // Obtener el salario base y actualizar el campo txtSalarioBase
                    double salarioBase = res.getDouble("sueldo_base");
                    txtSalarioBase.setText(String.valueOf(salarioBase));
                }
            } catch (SQLException e) {
                System.out.println("Error al obtener el salario base: " + e.getMessage());
            }
        }
    }

    private void calcularSueldoBruto() {
        String seleccionado = (String) CbxPersonal.getSelectedItem();
        if (seleccionado != null) {
            String dni = seleccionado.substring(seleccionado.indexOf("(") + 1, seleccionado.indexOf(")"));
            double sueldoBase;
            int diasLaborados;

            Conexion con = new Conexion();
            try {
                // Obtener sueldo base
                String sqlBase = "SELECT sueldo_base FROM empleado WHERE dni = ?";
                PreparedStatement preBase = con.getconexion().prepareStatement(sqlBase);
                preBase.setString(1, dni);
                ResultSet resBase = preBase.executeQuery();

                if (resBase.next()) {
                    sueldoBase = resBase.getDouble("sueldo_base");

                    // Obtener días laborados
                    String sqlDias = "SELECT COUNT(DISTINCT fecha) AS dias_laborados FROM registro_asistencia WHERE idempl = (SELECT idempleado FROM empleado WHERE dni = ?)";
                    PreparedStatement preDias = con.getconexion().prepareStatement(sqlDias);
                    preDias.setString(1, dni);
                    ResultSet resDias = preDias.executeQuery();

                    if (resDias.next()) {
                        diasLaborados = resDias.getInt("dias_laborados");
                        double descuento = sqlPlanilla.calcularDescuento(sueldoBase, diasLaborados);
                        double sueldoBruto = sqlPlanilla.calcularSueldoBruto(sueldoBase, descuento);
                        txtSalarioFinal.setText(String.format("%.2f", sueldoBruto));
                    }
                }
            } catch (SQLException e) {
                System.out.println("Error al calcular el sueldo bruto: " + e.getMessage());
            } finally {
                try {
                    con.getconexion().close(); // Cerrar conexión manualmente
                } catch (SQLException ex) {
                    System.out.println("Error al cerrar la conexión: " + ex.getMessage());
                }
            }
        }
    }

    private void btnPagarActionPerformed(java.awt.event.ActionEvent evt) {
        String seleccionado = (String) CbxPersonal.getSelectedItem();
        if (seleccionado != null) {
            // Extraemos el DNI del empleado (que está concatenado con el nombre)
            String dni = seleccionado.substring(seleccionado.indexOf("(") + 1, seleccionado.indexOf(")"));

            Conexion con = new Conexion();
            ResultSet res;

            try {
                con.getconexion();

                // Obtener los datos del empleado (salario base y nombre)
                String sql = "SELECT idempleado, nombre, sueldo_base FROM empleado WHERE dni = ?";
                PreparedStatement pre = con.getconexion().prepareStatement(sql);
                pre.setString(1, dni);
                res = pre.executeQuery();

                if (res.next()) {
                    String nombre = res.getString("nombre");
                    double sueldoBase = res.getDouble("sueldo_base");
                    int idEmpleado = res.getInt("idempleado");

                    // Obtener días laborados
                    String sqlDias = "SELECT COUNT(DISTINCT fecha) AS dias_laborados FROM registro_asistencia WHERE idempl = ?";
                    PreparedStatement preDias = con.getconexion().prepareStatement(sqlDias);
                    preDias.setInt(1, idEmpleado);  // Usamos el idempleado en lugar de dni
                    ResultSet resDias = preDias.executeQuery();

                    if (resDias.next()) {
                        int diasLaborados = resDias.getInt("dias_laborados");
                        double descuento = sqlPlanilla.calcularDescuento(sueldoBase, diasLaborados);
                        double sueldoBruto = sqlPlanilla.calcularSueldoBruto(sueldoBase, descuento);
                        String sueldoBrutoFormateado = String.format("%.2f", sueldoBruto);

                        // Obtener la fecha actual
                        String fechaActual = java.time.LocalDate.now().toString(); // YYYY-MM-DD

                        // Insertar los datos en la tabla (solo las columnas requeridas)
                        DefaultTableModel modelo = (DefaultTableModel) tablaPlanilla.getModel();
                        Object[] datos = new Object[]{
                            idEmpleado, // ID del empleado
                            nombre, // Nombre del empleado
                            diasLaborados, // Días laborados
                            sueldoBrutoFormateado,// Sueldo bruto
                            fechaActual // Fecha actual (cuando se realiza el pago)
                        };
                        modelo.addRow(datos);

                        // Insertar los mismos datos en la base de datos (tabla planilla)
                        String sqlInsertar = "INSERT INTO planilla (idempl, periodo, salario_bruto) VALUES (?, ?, ?)";
                        PreparedStatement preInsert = con.getconexion().prepareStatement(sqlInsertar);
                        preInsert.setInt(1, idEmpleado);  // ID del empleado
                        preInsert.setInt(2, diasLaborados); // Periodo (días laborados)
                        preInsert.setDouble(3, sueldoBruto); // Sueldo bruto

                        // Ejecutar la inserción
                        int filasAfectadas = preInsert.executeUpdate();
                        if (filasAfectadas > 0) {
                            System.out.println("Datos guardados en la base de datos.");
                            limpiar();
                        } else {
                            System.out.println("Error al guardar en la base de datos.");
                        }
                    }
                }

            } catch (SQLException e) {
                System.out.println("Error al pagar: " + e.getMessage());
            }
        }
    }
    
    public void limpiar (){
    
        txtSalarioBase.setText("");
        txtSalarioFinal.setText("");
        
    }

}
